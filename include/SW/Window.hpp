#ifndef __Window_hpp_INCLUDED
#define __Window_hpp_INCLUDED

#include <SW/Config.hpp>


#include <SW/Event.hpp>
#include <SW/Vector.hpp>
#include <SW/Mouse.hpp>
#include <SW/Keyboard.hpp>
#include <SW/GLContext.hpp>
#include <SW/Clock.hpp>
#include <SW/Color.hpp>
#include <SW/View.hpp>
#include <SW/VertexArray.hpp>

#include <string>
#include <queue>
#include <map>


namespace sw
{

/// @brief Easy to handle class for managing windows
class SW_API Window
{
private:
    HWND            m_handle;
    HDC             m_deviceContext;
    GLContext       m_glContext;
    HCURSOR&        m_usedCursor;
    fVec2           m_subPixel;         // This is needed to move the window with float values
    Clock           m_internalClock;    // This is needed to manage the frame rate
    Time            m_targetRate;

    static unsigned nb_windows;

    static iVec2 screenSize;

    std::queue<Event> m_eventQueue;
    static void createWindowClass();
    inline static const LPCSTR className = "My_windows_somehow";

    static HCURSOR cursor_arrow;
    static HCURSOR cursor_finger;
    static HCURSOR cursor_cross;
    static HCURSOR cursor_no;

    WINDOWPLACEMENT getWindowPlacementInfo() const;

public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief The only constructor for the Window class
    ///
    /// @param x Desired width for the new Window
    /// @param y Desired height for the new Window
    /// @param title Title to give to the new Window
    /// @param targetFPS When calling the `display` method, the Window will limit the update frequency to `1/targetFPS`
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Window(unsigned x, unsigned y, std::string title, float targetFPS = 60);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Window destructor. This will free up resources and delete the window.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ~Window();
    
    // Here we delete the default constructor and the copy constructor and operator
    Window() = delete;
    Window(const Window& other) = delete;
    Window& operator=(const Window& other) = delete;

    // void open(unsigned x, unsigned y, std::string title = "Some window");
    // void close();

    /// TODO private this
    static LRESULT CALLBACK globalCallback(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
    bool processEvent(UINT uMsg, WPARAM wParam, LPARAM lParam);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Updates the displayed content of the window and tries to sync to the target FPS
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void display();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Clears the window. Also resets depth testing.
    ///
    /// @param clearColor Color to clear the window with
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void clear(const Color& clearColor = Color::Black);
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Sets the frame rate that the window tries to maintain
    ///
    /// @param targetFPS New target frame rate
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setTargetFPS(float targetFPS);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Tries to get event data
    ///
    /// @param p_event Pointer to the sw::Event in which the event data will be placed
    ///
    /// @return Wether an event was actually retrieved.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    bool getEvent(Event* p_event);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Sets the cursor used when the mouse is inside the window
    ///
    /// @param cursorType Cursor id
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setCursor(Mouse::Cursor cursorType);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief This should only be used if you know what you're doing.
    ///
    /// @return The `HWND` handle of the Win32 window
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    HWND getWin32Handle() const;
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief This should only be used if you know what you're doing. 
    ///
    /// It is set so that the device context doesn't have to be freed, so don't do it.
    ///
    /// @return The `HDC` device context of the Win32 window
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    HDC getDeviceContext() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Gets the position of the window in the screen
    ///
    /// @return The top-left corner's coordinates
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    iVec2 getPosition() const;
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Gets the size of the window in the screen
    ///
    /// @return The size of the window, excluding (I think) the titlebar
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    iVec2 getSize() const;
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Sets the position if the window in the screen
    ///
    /// @param newPosition The window's desired new position
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setPosition(iVec2 newPosition);
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Basically `setPosition(getPosition() + offset)`
    ///
    /// @param offset 
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void move(fVec2 offset);
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Sets the size of the window in the screen
    ///
    /// @param newSize The window's desired new size
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setSize(iVec2 newSize);
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Basically `setPosition(topleft); setSize(bottomRight - topLeft)` But more efficient
    ///
    /// @param topLeft The new coordinate for the top-left corner of the window
    /// @param bottomRight The new coordinate for the bottom-right corner of the window
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setBox(iVec2 topLeft, iVec2 bottomRight);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Translates a coordinate from screen space to window space
    ///
    /// @param pos A position in the screen
    ///
    /// @return That same position but relative to the window
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    iVec2 screenToWindow(const iVec2& pos) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Translates a coordinate from window space to screen space
    ///
    /// @param pos A position in the window
    ///
    /// @return That same position but relative to the screen
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    iVec2 windowToScreen(const iVec2& pos) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Gets the size of the screen
    ///
    /// @return The screen's size
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const iVec2& getScreenSize();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Changes the title of the window
    ///
    /// @param newTitle The new title
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setTitle(std::string newTitle);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Applies a `sw::View` object to the screen. For more info, check the `sw::View` documentation.
    ///
    /// It is not needed to call this function every frame. However if you regularly change your view you will end up needing to
    ///
    /// @param view `sw::View` object to apply
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setView(const View& view);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Draws an object represented by a `sw::VertexArray` to the window
    ///
    /// @param object The object to be drawn
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void draw(const VertexArray& object);

};  // class Window

}   // namespace sw


#endif // __Window_hpp_INCLUDED
